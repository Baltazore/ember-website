{{page-title "Polaris"}}

<section class="container" aria-labelledby="octane-edition">
  <h1 id="octane-edition">The Polaris Edition of Ember</h1>
  <p class="intro">
    We are now full steam ahead on getting this next edition of Ember completed! We will be updating this page with relevant information so make sure to keep an eye out for news.
  </p>
  <p class="mb-3">
    Polaris represents a big shift towards interoperability with the general JavaScript ecosystem.
    Developers will find a new <a href="https://github.com/ember-template-imports/ember-template-imports">authoring format for components</a> that further simplifies their usage,
    a new <a href="https://github.com/embroider-build/embroider">build pipeline</a> that hooks into the tool of your choice (webpack, rollup, etc), and a new <a href="https://github.com/NullVoxPopuli/ember-resources">reactivity system</a>.
  </p>

  <h2>The pillars of Polaris</h2>
  <p>The Polaris edition of Ember is built upon these core concepts.</p>

  <h3>1. First-class TypeScript Support</h3>
  <p>Ember has embraced TypeScript as a first-class citizen next to JavaScript. In practice this means you can build apps using TypeScript without having to worry about incompatibility with external type definitions of Ember itself. As of version 5.1, Ember ships with built-in stable types. Read all about it and how to get started <a href="https://blog.emberjs.com/stable-typescript-types-in-ember-5-1">in the Stable TypeScript Types announcement post.</a> Glint, the TypeScript-powered tooling for Glimmer templates, also shipped as a stable release after two years of public preview. For more information, read the <a href="https://blog.emberjs.com/glint-1-0-released">Glint release blog post</a>.</p>

  <h3>2. Template tag components</h3>
  <p>The template tag syntax is the new authoring format for components in Ember. It addresses some long-standing developer experience challenges with the current format, and incorporates community feedback. Improvements include: explicit imports prevent naming conflicts, the new ability to introduce locally-scoped code, improved interoperability with third-party JavaScript libraries in the template, and aligning test syntax with app syntax. It also helps unlock the road to new capabilities such as code splitting in the future. See the <a href="https://github.com/ember-template-imports/ember-template-imports">ember-template-imports repository </a> to get started today!</p>

  <h3>3. Embroider build system</h3>
  <p>Embroider is the next-generation build system for Ember apps. The goal is to compile Ember apps into spec-compliant, modern Javascript. This allows the integration with all the build tooling improvements seen in the wider JavaScript ecosystem.</p>

  <h3>4. Reactivity improvements</h3>
  <p>The Octane edition saw the introduction of auto-tracking which simplified the previous reactivity system, and made it more performant. Polaris introduces the concept of <a href="https://github.com/NullVoxPopuli/ember-resources">resources</a>. This pattern is a general concept that extends beyond Ember or any framework, and this is what <a href="https://www.starbeamjs.com/">Starbeam</a> is solving: Universal Reactivity.</p>

  <h2>How you can help</h2>
  <p>
    Shipping an edition is a collaborative effort that involves the entire Ember community.
    If you are able and interested in contributing, check out the <a href="https://github.com/orgs/emberjs/projects/9/views/1">main project board</a>.
  </p>

  <h2>Frequently Asked Questions</h2>
  <dl class="dl-faq">
    <dt>Where can I get help or ask questions?</dt>
    <dd>
      Visit <LinkTo @route="community">the community page</LinkTo> to join the forums or chat!
      The <a href="https://discord.gg/emberjs" target="_blank" rel="noopener noreferrer">Ember Discord</a> has channels specifically for Polaris where you can search for other people's questions too. Read the "welcome" and "setup profile" channels to learn how to get posting permissions.
    </dd>
  </dl>
</section>
